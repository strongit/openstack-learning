#!/usr/bin/env python
#
# Copyright 2016 Kenneth A. Giusti
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import logging
import optparse
import sys
import time
import uuid

from oslo_config import cfg
import oslo_messaging


class TestNotificationEndpoint(object):
    def __init__(self, name, quiet=False):
        self.name = name
        self.quiet = quiet

    def _report(self, severity, ctx, publisher, event_type, payload, metadata):
        if not self.quiet:
            print("%s Notification %s:%s:%s:%s:%s"
                  % (self.name, severity, publisher,
                     event_type, payload, metadata))

    def debug(self, ctx, publisher, event_type, payload, metadata):
        self._report("debug", ctx, publisher, event_type, payload, metadata)
    def audit(self, ctx, publisher, event_type, payload, metadata):
        self._report("audit", ctx, publisher, event_type, payload, metadata)
    def critical(self, ctx, publisher, event_type, payload, metadata):
        self._report("critical", ctx, publisher, event_type, payload, metadata)
    def error(self, ctx, publisher, event_type, payload, metadata):
        self._report("error", ctx, publisher, event_type, payload, metadata)
    def info(self, ctx, publisher, event_type, payload, metadata):
        self._report("info", ctx, publisher, event_type, payload, metadata)
    def warn(self, ctx, publisher, event_type, payload, metadata):
        self._report("warn", ctx, publisher, event_type, payload, metadata)


def main(argv=None):
    _usage = """Usage: %prog [options]"""
    parser = optparse.OptionParser(usage=_usage)
    parser.add_option("--name", action="store",
                      default="listener-" + uuid.uuid4().hex)
    parser.add_option("--topic", action="store", default="notifications",
                      help="target topic, default 'notifications'")
    parser.add_option("--url", action="store", default="rabbit://localhost",
                      help="transport address, default 'rabbit://localhost'")
    parser.add_option("--pool", action="store")
    parser.add_option("--oslo-config", type="string",
                      help="the oslo.messaging configuration file.")
    parser.add_option("--quiet", action="store_true", default=False,
                      help="Supress console output")
    parser.add_option("--debug", action="store_true",
                      help="Enable debug logging.")

    opts, __ = parser.parse_args(args=argv)

    if not opts.quiet:
        print("listener %s: url=%s, topics=%s" % (opts.name, opts.url, opts.topic))

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.WARN)

    if opts.oslo_config:
        if opts.debug: print("Loading config file %s" % opts.oslo_config)
        cfg.CONF(["--config-file", opts.oslo_config])

    targets = [oslo_messaging.Target(topic=opts.topic)]
    transport = oslo_messaging.get_transport(cfg.CONF, url=opts.url)
    listener = oslo_messaging.get_notification_listener(transport,
                                                        targets,
                                                        [TestNotificationEndpoint(opts.name,
                                                                                  opts.quiet)],
                                                        pool=opts.pool)
    try:
        listener.start()
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        print("Stopping..")
    listener.stop()
    listener.wait()
    transport.cleanup()
    return 0

if __name__ == "__main__":
    sys.exit(main())

