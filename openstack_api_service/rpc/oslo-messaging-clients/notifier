#!/usr/bin/env python
#
# Copyright 2015 Kenneth A. Giusti
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import logging
import optparse
import sys
import time
import uuid

from oslo_config import cfg
import oslo_messaging


def main(argv=None):
    _usage = """Usage: %prog [options]"""
    parser = optparse.OptionParser(usage=_usage)
    parser.add_option("--name", action="store",
                      default="notifier-" + uuid.uuid4().hex)
    parser.add_option("--topic", action="store", default="notifications",
                      help="target topic, default 'notifications'")
    parser.add_option("--url", action="store", default="rabbit://localhost",
                      help="transport address, default 'rabbit://localhost'")
    parser.add_option("--quiet", action="store_true", default=False,
                      help="Supress console output")
    parser.add_option("--type", action="store", default="test.event",
                      help="Type of event, default 'test.event'")
    parser.add_option("--severity", action="store", default="debug",
                      help="Severity of event, default 'debug'")
    parser.add_option("--payload", action="store", default="payload")
    parser.add_option("--count", action="store", type="int", default=1,
                      help="Send COUNT notifications, default 1")
    parser.add_option("--debug", action="store_true",
                      help="Enable debug logging.")
    parser.add_option("--oslo-config", type="string",
                      help="the oslo.messaging configuration file.")

    opts, __ = parser.parse_args(args=argv)
    topic = opts.topic

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.WARN)

    if opts.oslo_config:
        if opts.debug: print("Loading config file %s" % opts.oslo_config)
        cfg.CONF(["--config-file", opts.oslo_config])

    if not opts.quiet:
        print("notifier %s: url=%s, topic=%s severity=%s"
              % (opts.name, opts.url, topic, opts.severity))

    transport = oslo_messaging.get_transport(cfg.CONF, url=opts.url)
    n = oslo_messaging.notify.notifier.Notifier(transport,
                                                opts.name,
                                                driver='messaging',
                                                topic=topic)
    for i in range(opts.count):
        f = getattr(n, opts.severity, 'debug')
        f({}, opts.type, {"payload":opts.payload})

    transport.cleanup()
    return 0

if __name__ == "__main__":
    sys.exit(main())
